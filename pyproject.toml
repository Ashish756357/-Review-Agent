[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "pr-review-agent"
dynamic = ["version"]
description = "AI-powered pull request review agent for multiple git platforms"
readme = "README.md"
authors = [
    {name = "PR Review Agent", email = "agent@supernova.com"}
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "requests>=2.28.0",
    "PyYAML>=6.0",
    "python-dotenv>=0.19.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "asyncio-mqtt>=0.12.0",
    "aiofiles>=0.21.0",
    "pathspec>=0.11.0",
    "colorama>=0.4.6",
    "rich>=13.0.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "bandit>=1.7.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
]
github = [
    "PyGithub>=1.58.0",
]
gitlab = [
    "python-gitlab>=3.15.0",
]
bitbucket = [
    "atlassian-python-api>=3.39.0",
]
all = [
    "pr-review-agent[dev,github,gitlab,bitbucket]",
]

[project.scripts]
pr-review-agent = "pr_review_agent.main:main"

[project.urls]
Homepage = "https://github.com/supernova/pr-review-agent"
Repository = "https://github.com/supernova/pr-review-agent"
Issues = "https://github.com/supernova/pr-review-agent/issues"

[tool.setuptools]
packages = ["pr_review_agent", "pr_review_agent.providers", "pr_review_agent.analyzers"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38']
include = "\\.pyi?$"
extend-exclude = '''
/( 
    # directories
    \\\\.eggs
    | \\\\.git
    | \\\\.hg
    | \\\\.mypy_cache
    | \\\\.tox
    | \\\\.venv
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=pr_review_agent",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["pr_review_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol",
    "@(abc\\.)?abstractmethod",
]
